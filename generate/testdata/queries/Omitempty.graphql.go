package test

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/me/mypkg"
)

type OmitEmptyQueryResponse struct {
	User         OmitEmptyQueryUser `json:"user"`
	MaybeConvert time.Time          `json:"maybeConvert"`
	Convert2     time.Time          `json:"convert2"`
}

type OmitEmptyQueryUser struct {
	Id mypkg.ID `json:"id"`
}

type Role string

const (
	RoleStudent Role = "STUDENT"
	RoleTeacher Role = "TEACHER"
)

type UserQueryInput struct {
	Email string   `json:"email"`
	Name  string   `json:"name"`
	Id    mypkg.ID `json:"id"`
	Role  Role     `json:"role"`
	Names []string `json:"names"`
}

func OmitEmptyQuery(
	client graphql.Client,
	query UserQueryInput,
	dt time.Time,
	tz string,
	tzNoOmitEmpty string,
) (*OmitEmptyQueryResponse, error) {
	variables := map[string]interface{}{
		"query":         query,
		"dt":            dt,
		"tz":            tz,
		"tzNoOmitEmpty": tzNoOmitEmpty,
	}

	var retval OmitEmptyQueryResponse
	err := client.MakeRequest(
		nil,
		"OmitEmptyQuery",
		`
query OmitEmptyQuery ($query: UserQueryInput, $dt: DateTime, $tz: String, $tzNoOmitEmpty: String) {
	user(query: $query) {
		id
	}
	maybeConvert(dt: $dt, tz: $tz)
	convert2: maybeConvert(dt: $dt, tz: $tzNoOmitEmpty)
}
`,
		&retval,
		variables,
	)
	return &retval, err
}
